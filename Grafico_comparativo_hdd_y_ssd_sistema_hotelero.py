# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T1CkIruFHKf-kweVisgWVPaQusm2gugo
"""

import matplotlib.pyplot as plt
import numpy as np

def plot_disk_performance_vs_customer_service_corrected():
    """
    Genera un gráfico de barras que muestra la relación entre la velocidad de lectura/escritura del disco
    y el impacto en la calidad de atención al cliente (representado por tiempo de espera/fricción),
    incluyendo los valores numéricos directamente en el gráfico, usando barras para todas las métricas.
    """

    # Datos de rendimiento de disco (MB/s) - Valores típicos
    disk_types = ['HDD (Mecánico)', 'SSD (Estado Sólido)']
    avg_read_speed = [120, 500]  # MB/s
    avg_write_speed = [100, 450] # MB/s

    # Datos de impacto en la calidad de atención al cliente
    avg_customer_wait_time = [15, 3] # Segundos (ej. para un check-in o consulta de reserva)
    customer_satisfaction_score = [6, 9] # Escala de 1-10, donde 10 es muy satisfecho

    # Posiciones en el eje X para las barras
    x = np.arange(len(disk_types))
    bar_width = 0.15 # Reducido el ancho de las barras para acomodar más

    fig, ax1 = plt.subplots(figsize=(12, 7))

    # --- Barras para Velocidad de Lectura/Escritura en el Eje Y Izquierdo ---
    rects_read = ax1.bar(x - bar_width, avg_read_speed, bar_width, label='Velocidad de Lectura (MB/s)', color='skyblue')
    rects_write = ax1.bar(x, avg_write_speed, bar_width, label='Velocidad de Escritura (MB/s)', color='lightcoral')

    ax1.set_xlabel('Tipo de Disco Duro del Sistema Hotelero')
    ax1.set_ylabel('Velocidad (MB/s)', color='blue')
    ax1.tick_params(axis='y', labelcolor='blue')
    ax1.set_title('Análisis Comparativo: Rendimiento de Disco vs. Calidad de Atención al Cliente')
    ax1.set_xticks(x)
    ax1.set_xticklabels(disk_types)
    ax1.set_ylim(0, max(max(avg_read_speed), max(avg_write_speed)) * 1.2) # Ajustar límite y para las barras de velocidad

    # --- Eje Secundario para Calidad de Atención al Cliente (también con barras) ---
    ax2 = ax1.twinx() # Crea un segundo eje Y que comparte el mismo eje X

    # Barras para el tiempo de espera
    rects_wait = ax2.bar(x + bar_width, avg_customer_wait_time, bar_width, label='Tiempo de Espera Promedio (segundos)', color='green', alpha=0.7)
    # Barras para la satisfacción del cliente
    rects_satisfaction = ax2.bar(x + 2 * bar_width, customer_satisfaction_score, bar_width, label='Puntuación de Satisfacción (1-10)', color='purple', alpha=0.7)


    ax2.set_ylabel('Impacto en Cliente / Satisfacción', color='red')
    ax2.tick_params(axis='y', labelcolor='red')
    ax2.set_ylim(0, 18) # Ajustar límite y para las barras de impacto, dando espacio para las etiquetas

    # Combinar leyendas de ambos ejes
    lines, labels = ax1.get_legend_handles_labels()
    lines2, labels2 = ax2.get_legend_handles_labels()
    ax2.legend(lines + lines2, labels + labels2, loc='upper left', bbox_to_anchor=(0, 1.05)) # Ajustar posición para que no se superponga

    ax1.grid(axis='y', linestyle='--', alpha=0.7)

    # --- Añadir valores numéricos en las barras ---

    # Función auxiliar para etiquetar barras
    def autolabel_bars(rects, ax_target, suffix=""):
        for rect in rects:
            height = rect.get_height()
            ax_target.annotate(f'{height:.0f}{suffix}',
                               xy=(rect.get_x() + rect.get_width() / 2, height),
                               xytext=(0, 3),  # 3 puntos de offset vertical
                               textcoords="offset points",
                               ha='center', va='bottom', fontsize=9)

    autolabel_bars(rects_read, ax1, " MB/s")
    autolabel_bars(rects_write, ax1, " MB/s")
    autolabel_bars(rects_wait, ax2, "s")
    autolabel_bars(rects_satisfaction, ax2, "") # La etiqueta de satisfacción ya incluye "Score"

    # Etiqueta especial para los scores de satisfacción (quizás quieras un formato diferente)
    for rect in rects_satisfaction:
        height = rect.get_height()
        ax2.annotate(f'Score: {height:.0f}',
                     xy=(rect.get_x() + rect.get_width() / 2, height),
                     xytext=(0, -15), # Offset negativo para que esté debajo
                     textcoords="offset points",
                     ha='center', va='top', fontsize=9, color='purple', fontweight='bold')


    fig.tight_layout()
    plt.show()

if __name__ == "__main__":
    plot_disk_performance_vs_customer_service_corrected()